{
  "rules": {
    "context_initialization": {
      "description": "Starting point for each interaction",
      "steps": [
        "ALWAYS read `.notes/project_overview.md` and `.notes/task_list.md`",
        "Apply Chain of Thought (CoT) reasoning to decompose tasks",
        "Use Step-by-Step Rationalization (STaR) for decision making",
        "Analyze request type (code creation, debugging, architecture)",
        "Identify languages and frameworks involved",
        "Define core problem and desired outcome"
      ]
    },
    "operational_protocol": {
      "description": "How to approach tasks",
      "before_action": [
        "Create a MECE task breakdown",
        "Explore multiple solutions using Tree of Thoughts (ToT)",
        "Break down solution into logical steps",
        "Consider modularity and reusability",
        "Plan for testing and validation"
      ],
      "code_changes": [
        "Read relevant code sections before editing",
        "Preserve existing functionality",
        "Maintain type safety",
        "Optimize using A* Search principles",
        "Incorporate security best practices",
        "Follow React Server Components (RSC) patterns",
        "Implement proper error boundaries",
        "Use Suspense for async operations"
      ]
    },
    "safety_requirements": [
      "NEVER break type safety",
      "ALWAYS maintain proper error handling",
      "ALWAYS document new code",
      "Validate all inputs",
      "Use secure coding techniques",
      "Implement ARIA attributes",
      "Ensure keyboard navigation",
      "Follow WCAG 2.1 guidelines"
    ],
    "quality_standards": {
      "readability": [
        "Use clear variable names",
        "Maintain consistent formatting",
        "Ensure logical organization",
        "Write concise, readable TypeScript code",
        "Use functional and declarative patterns",
        "Follow DRY principle",
        "Implement early returns"
      ],
      "collaboration": [
        "Write comprehensive documentation",
        "Follow team coding standards",
        "Consider future maintainability"
      ],
      "typescript_standards": [
        "Use TypeScript for all code",
        "Prefer interfaces over types",
        "Avoid enums; use const maps",
        "Use 'satisfies' operator for validation"
      ],
      "component_architecture": [
        "Favor React Server Components",
        "Minimize 'use client' directives",
        "Structure exports, subcomponents, helpers, types logically",
        "Use proper naming conventions"
      ]
    },
    "priorities": [
      {
        "source": ".notes/",
        "weight": 1.0
      },
      {
        "source": "security",
        "weight": 0.9
      },
      {
        "source": "readability",
        "weight": 0.8
      },
      {
        "source": "performance",
        "weight": 0.8
      },
      {
        "source": "accessibility",
        "weight": 0.7
      }
    ],
    "modes": {
      "base": {
        "description": "For routine tasks",
        "considerations": [
          "Maintain existing patterns",
          "Follow established conventions",
          "Use appropriate design patterns",
          "Implement proper error handling"
        ]
      },
      "enhanced": {
        "description": "For complex problems",
        "considerations": [
          "Apply advanced reasoning techniques",
          "Evaluate multiple solutions",
          "Profile for performance",
          "Optimize Core Web Vitals",
          "Consider scalability implications"
        ]
      }
    },
    "project_directives": {
      "name": "my_project",
      "ai_first": true,
      "development_philosophy": [
        "Methodical and well-reasoned approach",
        "Optimize for technical precision and efficiency",
        "Ensure long-term maintainability",
        "Mobile-first responsive design",
        "Performance-oriented architecture"
      ],
      "tech_stack": {
        "core": [
          "TypeScript",
          "React 19",
          "Next.js 15 (App Router)",
          "Vercel AI SDK",
          "Shadcn UI",
          "Radix UI",
          "Tailwind CSS",
          "Drizzle ORM"
        ],
        "testing": [
          "React Testing Library",
          "Jest",
          "Cypress"
        ]
      }
    }
  }
}